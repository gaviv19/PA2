var search_data = {"index":{"searchIndex":["moviedata","movietest","movies1","average()","find_similarity()","hashmovies()","hashusers()","load_data()","mean()","most_similar()","movies()","new()","new()","new()","popularity()","popularity_list()","predict()","rating()","rms()","run_test()","similarity()","stddev()","sum()","to_a()","viewers()","created.rid","u1.base","u1.test"],"longSearchIndex":["moviedata","movietest","movies1","movies1#average()","movies1#find_similarity()","movies1#hashmovies()","movies1#hashusers()","movies1#load_data()","movietest#mean()","movies1#most_similar()","moviedata#movies()","moviedata::new()","movietest::new()","movies1::new()","movies1#popularity()","movies1#popularity_list()","moviedata#predict()","moviedata#rating()","movietest#rms()","moviedata#run_test()","movies1#similarity()","movietest#stddev()","movietest#sum()","movietest#to_a()","moviedata#viewers()","","",""],"info":[["MovieData","","MovieData.html","",""],["MovieTest","","MovieTest.html","","<p>mean: returns the average prediction error (which should be close to zero)\n<p>stddev: returns the standard …\n"],["Movies1","","Movies1.html","","<p>February 9, 2015 cosi 105b, prof. Pito Salas Aviv Glick\n<p>(PA) Movies Part 1 / Movies Part 2\n<p>This class arranges …\n"],["average","Movies1","Movies1.html#method-i-average","(ratings)","<p>averages the rating of a movie from an array of values of ratings\n"],["find_similarity","Movies1","Movies1.html#method-i-find_similarity","(user1Hash, user2Hash)","<p>returns the similary value of two users, based on the average similairy\nvalue between any two movies …\n"],["hashMovies","Movies1","Movies1.html#method-i-hashMovies","()","<p>returns a hash from a movie to an array of all its ratings {movie} =&gt;\n[rating1, rating2, …]\n"],["hashUsers","Movies1","Movies1.html#method-i-hashUsers","()","<p>creates a nested hash of all users {user1 =&gt; {m1 =&gt; r1, m2 =&gt; r2,\n…}, user2 =&gt;.…}\n"],["load_data","Movies1","Movies1.html#method-i-load_data","(fileName)","<p>reads the data from the database and stores it as nested array of strings,\nof four elements in each array. …\n"],["mean","MovieTest","MovieTest.html#method-i-mean","()","<p>returns the average prediction error (which should be close to zero)\n"],["most_similar","Movies1","Movies1.html#method-i-most_similar","(u)","<p>returns a list of users whose tastes are most similar to the taste of user\nu\n"],["movies","MovieData","MovieData.html#method-i-movies","(u, set=@trainingSet)","<p>returns array of movies that user u has watched. Use the training set if\nnone was passed\n"],["new","MovieData","MovieData.html#method-c-new","(trainingSet, testSet = nil)",""],["new","MovieTest","MovieTest.html#method-c-new","(list)",""],["new","Movies1","Movies1.html#method-c-new","(fileName)",""],["popularity","Movies1","Movies1.html#method-i-popularity","(movieId)","<p>returns the popularity of a given movie, whose value is (a + 2^r) - 1,\nwhere:  a = the movie&#39;s average …\n"],["popularity_list","Movies1","Movies1.html#method-i-popularity_list","()","<p>returns a list of popular movies, ordered by popularity in a decreasing\norder\n"],["predict","MovieData","MovieData.html#method-i-predict","(u, m)","<p>returns a floating point number between 1.0 and 5.0 as an estimate of what\nuser u would rate movie m …\n"],["rating","MovieData","MovieData.html#method-i-rating","(u, m)","<p>returns the rating user u gave to movie m in the Training set, and 0 if u\ndid not rate m\n"],["rms","MovieTest","MovieTest.html#method-i-rms","()","<p>returns the root mean square error of the prediction\n"],["run_test","MovieData","MovieData.html#method-i-run_test","(k=nil)","<p>runs the predict(u, m) method on the first k ratings in the Test set, and\nreturns a MovieTest object …\n"],["similarity","Movies1","Movies1.html#method-i-similarity","(user1, user2)","<p>returns a number that indicates similarities in movie preference between\nuser1 and user2 (by user_id …\n"],["stddev","MovieTest","MovieTest.html#method-i-stddev","()","<p>returns the standard deviation of the prediction error\n"],["sum","MovieTest","MovieTest.html#method-i-sum","(arr)","<p>return the sum of elements in an array\n"],["to_a","MovieTest","MovieTest.html#method-i-to_a","()","<p>returns an array of the predictions in the form [user, movie, rating,\npredicted rating]\n"],["viewers","MovieData","MovieData.html#method-i-viewers","(m, set=@trainingSet)","<p>returns the array of users that have seen movie m. Use the training set if\nnone was passed\n"],["created.rid","","doc/created_rid.html","",""],["u1.base","","ml-100k/u1_base.html","","<p>1       1       5       874965758 1       2       3       876893171 1      \n3       4       878542960 …\n"],["u1.test","","ml-100k/u1_test.html","","<p>1       6       5       887431973 1       10      3       875693118 1      \n12      5       878542960 …\n"]]}}